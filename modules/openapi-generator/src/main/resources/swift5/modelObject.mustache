{{#discriminator}}
public enum {{classname}}Family: String, ClassFamily {
  static var discriminator: Discriminator = .type
  {{#mappedModels}}
  case {{#lambda.camelcase}}{{{mappingName}}}{{/lambda.camelcase}} = "{{{modelName}}}"
  {{/mappedModels}}

  func getType() -> Any.Type {
      switch self {
      {{#mappedModels}}
      case .{{#lambda.camelcase}}{{{mappingName}}}{{/lambda.camelcase}}:
          return {{{modelName}}}.self
      {{/mappedModels}}
      }
  }
}
{{/discriminator}}

{{^objcCompatible}}{{#nonPublicApi}}internal{{/nonPublicApi}}{{^nonPublicApi}}public{{/nonPublicApi}} class {{classname}}: {{#parent}}{{{parent}}}{{/parent}}{{^parent}}{{classPrefix}}Codable, Hashable{{/parent}} { {{/objcCompatible}}
{{#objcCompatible}}@objc {{#nonPublicApi}}internal{{/nonPublicApi}}{{^nonPublicApi}}public{{/nonPublicApi}} class {{classname}}: NSObject, Codable { {{/objcCompatible}}

{{#vars}}
{{#isEnum}}
{{> modelInlineEnumDeclaration}}
{{/isEnum}}
{{/vars}}
{{#vars}}
{{#isEnum}}
    {{#description}}/** {{description}} */
    {{/description}}{{#deprecated}}
    @available(*, deprecated, message: "This property is deprecated.")
    {{/deprecated}}{{#nonPublicApi}}internal{{/nonPublicApi}}{{^nonPublicApi}}public{{/nonPublicApi}} {{#readonlyProperties}}private(set) {{/readonlyProperties}}var {{name}}: {{{datatypeWithEnum}}}{{#required}}{{#isNullable}}?{{/isNullable}}{{/required}}{{^required}}?{{/required}}{{#defaultValue}} = {{{defaultValue}}}{{/defaultValue}}
{{/isEnum}}
{{^isEnum}}
    {{#description}}/** {{description}} */
    {{/description}}{{#deprecated}}
    @available(*, deprecated, message: "This property is deprecated.")
    {{/deprecated}}{{#nonPublicApi}}internal{{/nonPublicApi}}{{^nonPublicApi}}public{{/nonPublicApi}} {{#readonlyProperties}}private(set) {{/readonlyProperties}}var {{name}}: {{{datatype}}}{{#required}}{{#isNullable}}?{{/isNullable}}{{/required}}{{^required}}?{{/required}}{{#defaultValue}} = {{{defaultValue}}}{{/defaultValue}}
    {{#objcCompatible}}
    {{#vendorExtensions.x-swift-optional-scalar}}
    {{#nonPublicApi}}internal{{/nonPublicApi}}{{^nonPublicApi}}public{{/nonPublicApi}} var {{name}}Num: NSNumber? {
        get {
            return {{name}} as NSNumber?
        }
    }
    {{/vendorExtensions.x-swift-optional-scalar}}
    {{/objcCompatible}}
{{/isEnum}}
{{/vars}}

{{#discriminator}}
    public enum Discriminator: CodingKey {
      case {{{discriminatorName}}}
    }
{{/discriminator}}

{{#hasVars}}
    {{#nonPublicApi}}internal{{/nonPublicApi}}{{^nonPublicApi}}public{{/nonPublicApi}} enum CodingKeys: String, CodingKey, CaseIterable { {{#allVars}}
        case {{name}}{{#vendorExtensions.x-codegen-escaped-property-name}} = "{{{baseName}}}"{{/vendorExtensions.x-codegen-escaped-property-name}}{{/allVars}}
    }

    required public init(from decoder: Decoder) throws {
      let container = try decoder.container(keyedBy: CodingKeys.self)
      {{#vars}}
      {{#isEnum}}
      self.{{name}} = try{{#required}}{{#isNullable}}?{{/isNullable}}{{/required}}{{^required}}?{{/required}} container.decode({{{enumName}}}.self, forKey: .{{name}})
      {{/isEnum}}
      {{^isEnum}}
      {{#isContainer}}
      {{#isListContainer}}
      {{#vendorExtensions.x-codegen-parent-model}}
      self.{{name}} = try{{#required}}{{#isNullable}}?{{/isNullable}}{{/required}}{{^required}}?{{/required}} container.decode(family: {{mostInnerItems.dataType}}Family.self, forKey: .{{name}})
      {{/vendorExtensions.x-codegen-parent-model}}
      {{^vendorExtensions.x-codegen-parent-model}}
      self.{{name}} = try{{#required}}{{#isNullable}}?{{/isNullable}}{{/required}}{{^required}}?{{/required}} container.decode({{{datatype}}}.self, forKey: .{{name}})
      {{/vendorExtensions.x-codegen-parent-model}}
      {{/isListContainer}}
      {{#isMapContainer}}
      self.{{name}} = try{{#required}}{{#isNullable}}?{{/isNullable}}{{/required}}{{^required}}?{{/required}} container.decode({{{datatype}}}.self, forKey: .{{name}})
      {{/isMapContainer}}
      {{/isContainer}}
      {{^isContainer}}
      self.{{name}} = try{{#required}}{{#isNullable}}?{{/isNullable}}{{/required}}{{^required}}?{{/required}} container.decode({{{datatype}}}.self, forKey: .{{name}})
      {{/isContainer}}
      {{/isEnum}}
      {{/vars}}
      {{#parent}}
      try super.init(from: decoder)
      {{/parent}}
    }

    {{#nonPublicApi}}internal{{/nonPublicApi}}{{^nonPublicApi}}public{{/nonPublicApi}} init({{#allVars}}{{name}}: {{{datatypeWithEnum}}}{{#required}}{{#isNullable}}?{{/isNullable}}{{/required}}{{^required}}? = nil{{/required}}{{#hasMore}}, {{/hasMore}}{{/allVars}}) {
        {{#vars}}
        self.{{name}} = {{name}}
        {{/vars}}
        {{#parent}}
        super.init({{#parentVars}}{{{name}}}:{{{name}}}{{#hasMore}},{{/hasMore}}{{/parentVars}})
        {{/parent}}
    }

    public static func ==(lhs: {{classname}}, rhs: {{classname}}) -> Bool {
      return ObjectIdentifier(lhs) == ObjectIdentifier(rhs)
    }

    {{^parent}}
    public func hash(into hasher: inout Hasher) { return hasher.combine(ObjectIdentifier(self)) }
    {{/parent}}
{{/hasVars}}
}